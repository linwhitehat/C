/* key words */
preprocessor directive:预处理指令器
preprocessing:预处理
stdio.h standard input/output header:标准输入输出头文件
declaration statement:声明语句
identifier:标识符
assignment statement:赋值语句
argument:参数
actual argument:实际参数
call:调用
invoke:请求
newline character:换行符
escape character:转义字符
format ing:格式化
header:函数头
body:函数体
debugging:调试
bugs:程序错误
program state:程序状态
reserved identifier:保留标识符

/* 章节内容 */
1.
头文件调用，#include <stdio.h>，C语言基本设计原则是避免不必要成分，因此有着许多库可以被调用以满足用户使用
#include 本身不是C语言的语句，而是预处理器指令，#开头的语句表明该语句在编译器接手之前由预处理器处理
2.
main()函数是C程序的执行起点，函数是C程序的基本模块
int main(void)
3.
单行注释 // 
多行注释/**/

文件注释
/**********************************************
*这是代码开端注释块的形式
*一般对作者，版权，编写日期以及功能进行描述
*这样使得代码更为规范，代码的规范化是科班和正规军的标识
***********************************************/

函数注释
/*
这样的形式可用于函数注释
函数声明部分包括函数名，参数，返回值，功能用法，是否存在性能隐患等
函数定义包括编程技巧，大致实现步骤等
*/

类注释
//描述类的功能和用法

变量注释
//普通变量若命名规范则不需要注释
//全局变量，注释其含义和用途
//类数据成员，说明用途

注释规范化，使用注释风格一致，在复杂或想法巧妙的代码前进行注释，单行注释在行尾空两格注释，连续多个单行注释需要对齐，传入参数注释（包括null，bool等传入数据的意义））

4.
代码块使用{}进行划定，表示函数体的开始与结束

5.声明
对程序中需要使用的变量进行声明，变量名即标识符，标识符需要指定数据类型
变量使用遵循先声明后使用
命名规范，避开关键字，以字母或下划线作为命名开头，命名内容最好能有意义（可直接说明变量含义，否则需要注释）
6.
赋值，分配内存空间，顺序从右到左

Q：声明与定义（赋值）之间的区别
传递对象不同，声明是编译器，定义是内存，实际使用是需要定义之后才能使用
保护代码版权：将C代码编译，提供二进制文件以及只带有声明的库文件给用户使用->代码编程规范化
7.
以printf函数为例子，通过函数调用方式，传入参数，程序控制权由调用函数（此处为main()）交给请求函数（printf()），执行完后返回控制权
转义字符用于表示无法键入的字符
8.
return 返回语句，是函数的最后一个语句
9.代码规范化
程序可读性的良好保持
*使用一个空行分隔函数中的定义和动作部分
*变量声明和注释互补
*尽量把语句放在一行
10.调试
语法错误，一般编译器会发现
语义错误，多数需要人为调试

调试方式：
逐步执行，跟踪程序状态
关键点设置printf测试
调试器

11.关键字和保留标识符
ISO/ANSI C99 关键字
标准函数名和以下划线开始的标识符 保留标识符
